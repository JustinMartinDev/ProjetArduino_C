
main.elf:     format de fichier elf32-avr

Sections :
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  0000023c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800134  00800134  00000304  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000095e  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d3  00000000  00000000  00000cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000016b  00000000  00000000  000014b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  0000161c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ca  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e0  00000000  00000000  00001a42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING

Déassemblage de la section .text :

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e3       	ldi	r26, 0x34	; 52
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 33       	cpi	r26, 0x3A	; 58
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 88 00 	call	0x110	; 0x110 <main>
  9e:	0c 94 1c 01 	jmp	0x238	; 0x238 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
	static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL,_FDEV_SETUP_WRITE);
	stdout = &mystdout;
} 

static int uart_putchar(char c, FILE *stream)
{
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  if (c == '\n')
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putchar+0xe>
    uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
  b4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  b8:	85 ff       	sbrs	r24, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <uart_putchar+0xe>
  UDR0 = c;
  bc:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  return 0;
}
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <setup>:
void init_USART (unsigned int);
static int uart_putchar(char c, FILE *stream);

void setup (void)
{
	DDRD = 0b00010000; //initialisation des inputs et outputs sur D2
  c8:	80 e1       	ldi	r24, 0x10	; 16
  ca:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000; //Initialisation du port D
  cc:	1b b8       	out	0x0b, r1	; 11
  ce:	08 95       	ret

000000d0 <init_USART>:
	
}

void init_USART (unsigned int baud) 
{ 
	int UBRR = (int)((FOSC / 16 / baud) - 1); 
  d0:	9c 01       	movw	r18, r24
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	60 e4       	ldi	r22, 0x40	; 64
  d8:	72 e4       	ldi	r23, 0x42	; 66
  da:	8f e0       	ldi	r24, 0x0F	; 15
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 ab 00 	call	0x156	; 0x156 <__divmodsi4>
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	31 09       	sbc	r19, r1
	/* Initialisation des registres UBRR0L et UBRRR0H */ 
	UBRR0L = (unsigned char) UBRR;
  e6:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = (unsigned char)(UBRR>>8);
  ea:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	
	//Initialisation des registres UCSR0A, UCSR0B et UCSR0C
	
	//UCSR0A |= 0b00100000;
	UCSR0B |= 0b00011000;
  ee:	e1 ec       	ldi	r30, 0xC1	; 193
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 61       	ori	r24, 0x18	; 24
  f6:	80 83       	st	Z, r24
	UCSR0C |= 0b00000110;
  f8:	e2 ec       	ldi	r30, 0xC2	; 194
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	86 60       	ori	r24, 0x06	; 6
 100:	80 83       	st	Z, r24
   
   
	static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL,_FDEV_SETUP_WRITE);
	stdout = &mystdout;
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__data_end+0x3>
 10a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end+0x2>
 10e:	08 95       	ret

00000110 <main>:
}


int main (void) 
{
	setup();
 110:	0e 94 64 00 	call	0xc8	; 0xc8 <setup>
	init_USART(9600);
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	95 e2       	ldi	r25, 0x25	; 37
 118:	0e 94 68 00 	call	0xd0	; 0xd0 <init_USART>

    while(1) // Exécution en continue du programme
    {
        PORTD |= 0b00000100; // ALllume la led
 11c:	5a 9a       	sbi	0x0b, 2	; 11
        printf (" ALLUMER LE FEU \n");
 11e:	8e e0       	ldi	r24, 0x0E	; 14
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	83 ed       	ldi	r24, 0xD3	; 211
 12a:	90 e3       	ldi	r25, 0x30	; 48
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x1c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x26>
 136:	00 00       	nop
        _delay_ms (1000); //1000 ms allumé
        PORTD &= 0b11111011;// Eteins la led
 138:	5a 98       	cbi	0x0b, 2	; 11
        printf (" ET ON ETEINS TOUT \n");
 13a:	8f e1       	ldi	r24, 0x1F	; 31
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <puts>
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	8e e9       	ldi	r24, 0x9E	; 158
 146:	94 e2       	ldi	r25, 0x24	; 36
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x38>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x42>
 152:	00 00       	nop
 154:	e3 cf       	rjmp	.-58     	; 0x11c <main+0xc>

00000156 <__divmodsi4>:
 156:	05 2e       	mov	r0, r21
 158:	97 fb       	bst	r25, 7
 15a:	1e f4       	brtc	.+6      	; 0x162 <__divmodsi4+0xc>
 15c:	00 94       	com	r0
 15e:	0e 94 c2 00 	call	0x184	; 0x184 <__negsi2>
 162:	57 fd       	sbrc	r21, 7
 164:	07 d0       	rcall	.+14     	; 0x174 <__divmodsi4_neg2>
 166:	0e 94 ca 00 	call	0x194	; 0x194 <__udivmodsi4>
 16a:	07 fc       	sbrc	r0, 7
 16c:	03 d0       	rcall	.+6      	; 0x174 <__divmodsi4_neg2>
 16e:	4e f4       	brtc	.+18     	; 0x182 <__divmodsi4_exit>
 170:	0c 94 c2 00 	jmp	0x184	; 0x184 <__negsi2>

00000174 <__divmodsi4_neg2>:
 174:	50 95       	com	r21
 176:	40 95       	com	r20
 178:	30 95       	com	r19
 17a:	21 95       	neg	r18
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
 17e:	4f 4f       	sbci	r20, 0xFF	; 255
 180:	5f 4f       	sbci	r21, 0xFF	; 255

00000182 <__divmodsi4_exit>:
 182:	08 95       	ret

00000184 <__negsi2>:
 184:	90 95       	com	r25
 186:	80 95       	com	r24
 188:	70 95       	com	r23
 18a:	61 95       	neg	r22
 18c:	7f 4f       	sbci	r23, 0xFF	; 255
 18e:	8f 4f       	sbci	r24, 0xFF	; 255
 190:	9f 4f       	sbci	r25, 0xFF	; 255
 192:	08 95       	ret

00000194 <__udivmodsi4>:
 194:	a1 e2       	ldi	r26, 0x21	; 33
 196:	1a 2e       	mov	r1, r26
 198:	aa 1b       	sub	r26, r26
 19a:	bb 1b       	sub	r27, r27
 19c:	fd 01       	movw	r30, r26
 19e:	0d c0       	rjmp	.+26     	; 0x1ba <__udivmodsi4_ep>

000001a0 <__udivmodsi4_loop>:
 1a0:	aa 1f       	adc	r26, r26
 1a2:	bb 1f       	adc	r27, r27
 1a4:	ee 1f       	adc	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	a2 17       	cp	r26, r18
 1aa:	b3 07       	cpc	r27, r19
 1ac:	e4 07       	cpc	r30, r20
 1ae:	f5 07       	cpc	r31, r21
 1b0:	20 f0       	brcs	.+8      	; 0x1ba <__udivmodsi4_ep>
 1b2:	a2 1b       	sub	r26, r18
 1b4:	b3 0b       	sbc	r27, r19
 1b6:	e4 0b       	sbc	r30, r20
 1b8:	f5 0b       	sbc	r31, r21

000001ba <__udivmodsi4_ep>:
 1ba:	66 1f       	adc	r22, r22
 1bc:	77 1f       	adc	r23, r23
 1be:	88 1f       	adc	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	1a 94       	dec	r1
 1c4:	69 f7       	brne	.-38     	; 0x1a0 <__udivmodsi4_loop>
 1c6:	60 95       	com	r22
 1c8:	70 95       	com	r23
 1ca:	80 95       	com	r24
 1cc:	90 95       	com	r25
 1ce:	9b 01       	movw	r18, r22
 1d0:	ac 01       	movw	r20, r24
 1d2:	bd 01       	movw	r22, r26
 1d4:	cf 01       	movw	r24, r30
 1d6:	08 95       	ret

000001d8 <puts>:
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <__data_end+0x2>
 1e4:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <__data_end+0x3>
 1e8:	23 81       	ldd	r18, Z+3	; 0x03
 1ea:	21 ff       	sbrs	r18, 1
 1ec:	1b c0       	rjmp	.+54     	; 0x224 <puts+0x4c>
 1ee:	8c 01       	movw	r16, r24
 1f0:	d0 e0       	ldi	r29, 0x00	; 0
 1f2:	c0 e0       	ldi	r28, 0x00	; 0
 1f4:	f8 01       	movw	r30, r16
 1f6:	81 91       	ld	r24, Z+
 1f8:	8f 01       	movw	r16, r30
 1fa:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__data_end+0x2>
 1fe:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <__data_end+0x3>
 202:	db 01       	movw	r26, r22
 204:	18 96       	adiw	r26, 0x08	; 8
 206:	ed 91       	ld	r30, X+
 208:	fc 91       	ld	r31, X
 20a:	19 97       	sbiw	r26, 0x09	; 9
 20c:	88 23       	and	r24, r24
 20e:	31 f0       	breq	.+12     	; 0x21c <puts+0x44>
 210:	09 95       	icall
 212:	89 2b       	or	r24, r25
 214:	79 f3       	breq	.-34     	; 0x1f4 <puts+0x1c>
 216:	df ef       	ldi	r29, 0xFF	; 255
 218:	cf ef       	ldi	r28, 0xFF	; 255
 21a:	ec cf       	rjmp	.-40     	; 0x1f4 <puts+0x1c>
 21c:	8a e0       	ldi	r24, 0x0A	; 10
 21e:	09 95       	icall
 220:	89 2b       	or	r24, r25
 222:	19 f0       	breq	.+6      	; 0x22a <puts+0x52>
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	9f ef       	ldi	r25, 0xFF	; 255
 228:	02 c0       	rjmp	.+4      	; 0x22e <puts+0x56>
 22a:	8d 2f       	mov	r24, r29
 22c:	9c 2f       	mov	r25, r28
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	08 95       	ret

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
