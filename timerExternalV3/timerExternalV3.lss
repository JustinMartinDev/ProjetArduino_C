
timerExternalV3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000044  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000160  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e2  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001dd  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000110  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000030  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  78:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:

void setup (void);
void setup (void)
{

	DDRD = 0b00110100; //initialisation des inputs et outputs sur D
  80:	84 e3       	ldi	r24, 0x34	; 52
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00100000; //Initialisation du port D (D5 sous tension)
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	8b b9       	out	0x0b, r24	; 11
	
	SREG  = 0b10000000; //Permet les interruptions
  88:	80 e8       	ldi	r24, 0x80	; 128
  8a:	8f bf       	out	0x3f, r24	; 63
	
	TCCR1A = 0b00000000;//Initialisation du mode de fonctionnement du timer
  8c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0b00000101;//Initialisation de la fréquence du registre
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = 0b00000001;
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	80 93 6f 00 	sts	0x006F, r24
	TCNT1 =  49910; //65535 -(1/64*10^6) : 1000ms	
  9c:	86 ef       	ldi	r24, 0xF6	; 246
  9e:	92 ec       	ldi	r25, 0xC2	; 194
  a0:	90 93 85 00 	sts	0x0085, r25
  a4:	80 93 84 00 	sts	0x0084, r24
	
	
	
	
	EICRA = 0b00000100; //Déclenchement sur changement de niveau logique
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0b00000010;
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	8d bb       	out	0x1d, r24	; 29
	
	
}
  b2:	08 95       	ret

000000b4 <__vector_13>:


ISR(TIMER1_OVF_vect){
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	SREG &= 0b00000000;//Bloque les interruptions
  ca:	8f b7       	in	r24, 0x3f	; 63
  cc:	1f be       	out	0x3f, r1	; 63
	
	PORTD ^= 0b00010000; // Allume/Eteint la led
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	90 e1       	ldi	r25, 0x10	; 16
  d2:	89 27       	eor	r24, r25
  d4:	8b b9       	out	0x0b, r24	; 11
	
	TIFR1 &= 0b00000000;
  d6:	86 b3       	in	r24, 0x16	; 22
  d8:	16 ba       	out	0x16, r1	; 22
	/*
	if(first%2 == 0) TCNT1 = 49910;
	else TCNT1 = 60000;
	first++;
	*/
	TCNT1 = 49910;
  da:	86 ef       	ldi	r24, 0xF6	; 246
  dc:	92 ec       	ldi	r25, 0xC2	; 194
  de:	90 93 85 00 	sts	0x0085, r25
  e2:	80 93 84 00 	sts	0x0084, r24
  e6:	80 e1       	ldi	r24, 0x10	; 16
  e8:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ea:	20 e9       	ldi	r18, 0x90	; 144
  ec:	31 e0       	ldi	r19, 0x01	; 1
  ee:	f9 01       	movw	r30, r18
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <__vector_13+0x3c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f6:	d9 f7       	brne	.-10     	; 0xee <__vector_13+0x3a>
		_delay_ms (1000);
	TIMSK1 |= 0b00000001;
  f8:	80 91 6f 00 	lds	r24, 0x006F
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	80 93 6f 00 	sts	0x006F, r24
	SREG |= 0b10000000;//Autorise les interruptions
 102:	8f b7       	in	r24, 0x3f	; 63
 104:	80 68       	ori	r24, 0x80	; 128
 106:	8f bf       	out	0x3f, r24	; 63
}
 108:	ff 91       	pop	r31
 10a:	ef 91       	pop	r30
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	3f 91       	pop	r19
 112:	2f 91       	pop	r18
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <__vector_2>:



ISR(INT1_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
	SREG &= 0b00000000;//Bloque les interruptions
 12c:	8f b7       	in	r24, 0x3f	; 63
 12e:	1f be       	out	0x3f, r1	; 63
	
	PORTD ^= 0b00100100; // Allume/Eteint la led (changement d'etat)
 130:	8b b1       	in	r24, 0x0b	; 11
 132:	94 e2       	ldi	r25, 0x24	; 36
 134:	89 27       	eor	r24, r25
 136:	8b b9       	out	0x0b, r24	; 11
	

	
	
	EIFR &= 0b00000000;//INTF1 à 0
 138:	8c b3       	in	r24, 0x1c	; 28
 13a:	1c ba       	out	0x1c, r1	; 28

	
	SREG |= 0b10000000;//Autorise les interruptions
 13c:	8f b7       	in	r24, 0x3f	; 63
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	8f bf       	out	0x3f, r24	; 63
}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <main>:

int main (void) 
{
	
	setup();
 150:	0e 94 40 00 	call	0x80	; 0x80 <setup>
 154:	ff cf       	rjmp	.-2      	; 0x154 <main+0x4>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
