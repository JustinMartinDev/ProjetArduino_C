
main.elf:     format de fichier elf32-avr

Sections :
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000012a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001be  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006da  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000646  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000f5  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  00001050  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033a  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000013e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000142f  2**0
                  CONTENTS, READONLY, DEBUGGING

Déassemblage de la section .text :

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 90 00 	call	0x120	; 0x120 <main>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
void setup (void);
int first = 0;

void setup (void){

	DDRD = 0b00010000; //initialisation des inputs et outputs sur D2
  90:	80 e1       	ldi	r24, 0x10	; 16
  92:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000; //Initialisation du port D
  94:	1b b8       	out	0x0b, r1	; 11
	
	SREG  = 0b10000000; //Permet les interruptions
  96:	80 e8       	ldi	r24, 0x80	; 128
  98:	8f bf       	out	0x3f, r24	; 63
	TCCR1A = 0b00000000;//Initialisation du mode de fonctionnement du timer
  9a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0b00000101;//Initialisation de la frequence du registre
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = 0b00000001;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCNT1 =  49910; //65535 -(1/64*10^6) : 1000ms	//compteur initialisé
  aa:	86 ef       	ldi	r24, 0xF6	; 246
  ac:	92 ec       	ldi	r25, 0xC2	; 194
  ae:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  b2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  b6:	08 95       	ret

000000b8 <__vector_13>:
}


/*function déclancher à chaque interruption */
ISR(TIMER1_OVF_vect){
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
	SREG &= 0b00000000;//Bloque les interruptions
  c6:	8f b7       	in	r24, 0x3f	; 63
  c8:	1f be       	out	0x3f, r1	; 63
	
	PORTD ^= 0b00000100; // Allume/Eteint la led en fonction de leur etat
  ca:	9b b1       	in	r25, 0x0b	; 11
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	89 27       	eor	r24, r25
  d0:	8b b9       	out	0x0b, r24	; 11
	
	TIFR1 &= 0b00000000;
  d2:	86 b3       	in	r24, 0x16	; 22
  d4:	16 ba       	out	0x16, r1	; 22
	
	if(first%2 == 0) TCNT1 = 49910;
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  da:	80 fd       	sbrc	r24, 0
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <__vector_13+0x2c>
  de:	86 ef       	ldi	r24, 0xF6	; 246
  e0:	92 ec       	ldi	r25, 0xC2	; 194
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__vector_13+0x30>
	else TCNT1 = 60000; //on reduit le temps de la prochaine interruption 1 fois sur 2
  e4:	80 e6       	ldi	r24, 0x60	; 96
  e6:	9a ee       	ldi	r25, 0xEA	; 234
  e8:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ec:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	first++;
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	TIMSK1 |= 0b00000001;
 102:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 106:	81 60       	ori	r24, 0x01	; 1
 108:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	SREG |= 0b10000000;//Autorise les interruptions
 10c:	8f b7       	in	r24, 0x3f	; 63
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	8f bf       	out	0x3f, r24	; 63
}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <main>:

int main (void) {
	
	setup();
 120:	0e 94 48 00 	call	0x90	; 0x90 <setup>
 124:	ff cf       	rjmp	.-2      	; 0x124 <main+0x4>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
