
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000246  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000246  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800134  00800134  0000030e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000034  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002f0  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fe  00000000  00000000  00000652  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000200  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000143  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010c  00000000  00000000  00000be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000cef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e3       	ldi	r26, 0x34	; 52
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 33       	cpi	r26, 0x3A	; 58
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  9e:	0c 94 21 01 	jmp	0x242	; 0x242 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
void init_USART (unsigned int);
static int uart_putchar(char c, FILE *stream);

void setup (void)
{
	DDRD = 0b00010000; //initialisation des inputs et outputs sur D2
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000; //Initialisation du port D
  aa:	1b b8       	out	0x0b, r1	; 11
	
}
  ac:	08 95       	ret

000000ae <init_USART>:

void init_USART (unsigned int baud) 
{ 
	int UBRR = (int)((FOSC / 16 / baud) - 1); 
  ae:	9c 01       	movw	r18, r24
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	60 e4       	ldi	r22, 0x40	; 64
  b6:	72 e4       	ldi	r23, 0x42	; 66
  b8:	8f e0       	ldi	r24, 0x0F	; 15
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 af 00 	call	0x15e	; 0x15e <__divmodsi4>
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
	/* Initialisation des registres UBRR0L et UBRRR0H */ 
	UBRR0L = (unsigned char) UBRR;
  c4:	20 93 c4 00 	sts	0x00C4, r18
	UBRR0H = (unsigned char)(UBRR>>8);
  c8:	23 2f       	mov	r18, r19
  ca:	33 0f       	add	r19, r19
  cc:	33 0b       	sbc	r19, r19
  ce:	20 93 c5 00 	sts	0x00C5, r18
	
	//Initialisation des registres UCSR0A, UCSR0B et UCSR0C
	
	//UCSR0A |= 0b00100000;
	UCSR0B |= 0b00011000;
  d2:	e1 ec       	ldi	r30, 0xC1	; 193
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 61       	ori	r24, 0x18	; 24
  da:	80 83       	st	Z, r24
	UCSR0C |= 0b00000110;
  dc:	e2 ec       	ldi	r30, 0xC2	; 194
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	86 60       	ori	r24, 0x06	; 6
  e4:	80 83       	st	Z, r24
   
   
	static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL,_FDEV_SETUP_WRITE);
	stdout = &mystdout;
  e6:	85 e2       	ldi	r24, 0x25	; 37
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	90 93 37 01 	sts	0x0137, r25
  ee:	80 93 36 01 	sts	0x0136, r24
   // Définir le format d’une trame : 8 bits, parité : aucune, 1 bit de stop 
   /* 
	Code à écrire 
	*/ 
} 
  f2:	08 95       	ret

000000f4 <uart_putchar>:

static int uart_putchar(char c, FILE *stream)
{
  f4:	1f 93       	push	r17
  f6:	18 2f       	mov	r17, r24
  if (c == '\n')
  f8:	8a 30       	cpi	r24, 0x0A	; 10
  fa:	19 f4       	brne	.+6      	; 0x102 <uart_putchar+0xe>
    uart_putchar('\r', stream);
  fc:	8d e0       	ldi	r24, 0x0D	; 13
  fe:	0e 94 7a 00 	call	0xf4	; 0xf4 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 102:	80 91 c0 00 	lds	r24, 0x00C0
 106:	85 ff       	sbrs	r24, 5
 108:	fc cf       	rjmp	.-8      	; 0x102 <uart_putchar+0xe>
  UDR0 = c;
 10a:	10 93 c6 00 	sts	0x00C6, r17
  return 0;
}
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	1f 91       	pop	r17
 114:	08 95       	ret

00000116 <main>:


int main (void) 
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
void init_USART (unsigned int);
static int uart_putchar(char c, FILE *stream);

void setup (void)
{
	DDRD = 0b00010000; //initialisation des inputs et outputs sur D2
 11a:	80 e1       	ldi	r24, 0x10	; 16
 11c:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000; //Initialisation du port D
 11e:	1b b8       	out	0x0b, r1	; 11


int main (void) 
{
	setup();
	init_USART(9600);
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	95 e2       	ldi	r25, 0x25	; 37
 124:	0e 94 57 00 	call	0xae	; 0xae <init_USART>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 128:	c0 e9       	ldi	r28, 0x90	; 144
 12a:	d1 e0       	ldi	r29, 0x01	; 1

    while(1) // Exécution en continue du programme
    {
        PORTD |= 0b00000100; // ALllume la led
 12c:	5a 9a       	sbi	0x0b, 2	; 11
        printf (" ALLUMER LE FEU \n");
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <puts>
 136:	80 e1       	ldi	r24, 0x10	; 16
 138:	97 e2       	ldi	r25, 0x27	; 39
 13a:	fe 01       	movw	r30, r28
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 140:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 142:	d9 f7       	brne	.-10     	; 0x13a <main+0x24>
        _delay_ms (1000); //1000 ms allumé
        PORTD &= 0b11111011;// Eteins la led
 144:	5a 98       	cbi	0x0b, 2	; 11
        printf (" ET ON ETEINS TOUT \n");
 146:	81 e1       	ldi	r24, 0x11	; 17
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <puts>
 14e:	8c e4       	ldi	r24, 0x4C	; 76
 150:	9d e1       	ldi	r25, 0x1D	; 29
 152:	fe 01       	movw	r30, r28
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 158:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15a:	d9 f7       	brne	.-10     	; 0x152 <main+0x3c>
 15c:	e7 cf       	rjmp	.-50     	; 0x12c <main+0x16>

0000015e <__divmodsi4>:
 15e:	97 fb       	bst	r25, 7
 160:	09 2e       	mov	r0, r25
 162:	05 26       	eor	r0, r21
 164:	0e d0       	rcall	.+28     	; 0x182 <__divmodsi4_neg1>
 166:	57 fd       	sbrc	r21, 7
 168:	04 d0       	rcall	.+8      	; 0x172 <__divmodsi4_neg2>
 16a:	14 d0       	rcall	.+40     	; 0x194 <__udivmodsi4>
 16c:	0a d0       	rcall	.+20     	; 0x182 <__divmodsi4_neg1>
 16e:	00 1c       	adc	r0, r0
 170:	38 f4       	brcc	.+14     	; 0x180 <__divmodsi4_exit>

00000172 <__divmodsi4_neg2>:
 172:	50 95       	com	r21
 174:	40 95       	com	r20
 176:	30 95       	com	r19
 178:	21 95       	neg	r18
 17a:	3f 4f       	sbci	r19, 0xFF	; 255
 17c:	4f 4f       	sbci	r20, 0xFF	; 255
 17e:	5f 4f       	sbci	r21, 0xFF	; 255

00000180 <__divmodsi4_exit>:
 180:	08 95       	ret

00000182 <__divmodsi4_neg1>:
 182:	f6 f7       	brtc	.-4      	; 0x180 <__divmodsi4_exit>
 184:	90 95       	com	r25
 186:	80 95       	com	r24
 188:	70 95       	com	r23
 18a:	61 95       	neg	r22
 18c:	7f 4f       	sbci	r23, 0xFF	; 255
 18e:	8f 4f       	sbci	r24, 0xFF	; 255
 190:	9f 4f       	sbci	r25, 0xFF	; 255
 192:	08 95       	ret

00000194 <__udivmodsi4>:
 194:	a1 e2       	ldi	r26, 0x21	; 33
 196:	1a 2e       	mov	r1, r26
 198:	aa 1b       	sub	r26, r26
 19a:	bb 1b       	sub	r27, r27
 19c:	fd 01       	movw	r30, r26
 19e:	0d c0       	rjmp	.+26     	; 0x1ba <__udivmodsi4_ep>

000001a0 <__udivmodsi4_loop>:
 1a0:	aa 1f       	adc	r26, r26
 1a2:	bb 1f       	adc	r27, r27
 1a4:	ee 1f       	adc	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	a2 17       	cp	r26, r18
 1aa:	b3 07       	cpc	r27, r19
 1ac:	e4 07       	cpc	r30, r20
 1ae:	f5 07       	cpc	r31, r21
 1b0:	20 f0       	brcs	.+8      	; 0x1ba <__udivmodsi4_ep>
 1b2:	a2 1b       	sub	r26, r18
 1b4:	b3 0b       	sbc	r27, r19
 1b6:	e4 0b       	sbc	r30, r20
 1b8:	f5 0b       	sbc	r31, r21

000001ba <__udivmodsi4_ep>:
 1ba:	66 1f       	adc	r22, r22
 1bc:	77 1f       	adc	r23, r23
 1be:	88 1f       	adc	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	1a 94       	dec	r1
 1c4:	69 f7       	brne	.-38     	; 0x1a0 <__udivmodsi4_loop>
 1c6:	60 95       	com	r22
 1c8:	70 95       	com	r23
 1ca:	80 95       	com	r24
 1cc:	90 95       	com	r25
 1ce:	9b 01       	movw	r18, r22
 1d0:	ac 01       	movw	r20, r24
 1d2:	bd 01       	movw	r22, r26
 1d4:	cf 01       	movw	r24, r30
 1d6:	08 95       	ret

000001d8 <puts>:
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	8c 01       	movw	r16, r24
 1e2:	e0 91 36 01 	lds	r30, 0x0136
 1e6:	f0 91 37 01 	lds	r31, 0x0137
 1ea:	83 81       	ldd	r24, Z+3	; 0x03
 1ec:	81 ff       	sbrs	r24, 1
 1ee:	21 c0       	rjmp	.+66     	; 0x232 <puts+0x5a>
 1f0:	c0 e0       	ldi	r28, 0x00	; 0
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
 1f4:	0d c0       	rjmp	.+26     	; 0x210 <puts+0x38>
 1f6:	e0 91 36 01 	lds	r30, 0x0136
 1fa:	f0 91 37 01 	lds	r31, 0x0137
 1fe:	20 85       	ldd	r18, Z+8	; 0x08
 200:	31 85       	ldd	r19, Z+9	; 0x09
 202:	bf 01       	movw	r22, r30
 204:	f9 01       	movw	r30, r18
 206:	09 95       	icall
 208:	89 2b       	or	r24, r25
 20a:	11 f0       	breq	.+4      	; 0x210 <puts+0x38>
 20c:	cf ef       	ldi	r28, 0xFF	; 255
 20e:	df ef       	ldi	r29, 0xFF	; 255
 210:	f8 01       	movw	r30, r16
 212:	81 91       	ld	r24, Z+
 214:	8f 01       	movw	r16, r30
 216:	88 23       	and	r24, r24
 218:	71 f7       	brne	.-36     	; 0x1f6 <puts+0x1e>
 21a:	e0 91 36 01 	lds	r30, 0x0136
 21e:	f0 91 37 01 	lds	r31, 0x0137
 222:	20 85       	ldd	r18, Z+8	; 0x08
 224:	31 85       	ldd	r19, Z+9	; 0x09
 226:	8a e0       	ldi	r24, 0x0A	; 10
 228:	bf 01       	movw	r22, r30
 22a:	f9 01       	movw	r30, r18
 22c:	09 95       	icall
 22e:	89 2b       	or	r24, r25
 230:	11 f0       	breq	.+4      	; 0x236 <puts+0x5e>
 232:	cf ef       	ldi	r28, 0xFF	; 255
 234:	df ef       	ldi	r29, 0xFF	; 255
 236:	ce 01       	movw	r24, r28
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	08 95       	ret

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
