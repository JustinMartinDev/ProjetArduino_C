
serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000043  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001d5  00000000  00000000  0000022d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000138  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b5  00000000  00000000  0000053a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000eb  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000005e  00000000  00000000  0000082b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 77 00 	call	0xee	; 0xee <main>
  78:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_USART>:
void init_USART(unsigned int baud);


void init_USART (unsigned int baud) {
	int UBRR;
	UBRR = (int) ((FOSC / 16 / baud) - 1);
  80:	9c 01       	movw	r18, r24
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	60 e4       	ldi	r22, 0x40	; 64
  88:	72 e4       	ldi	r23, 0x42	; 66
  8a:	8f e0       	ldi	r24, 0x0F	; 15
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 7c 00 	call	0xf8	; 0xf8 <__divmodsi4>
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
	
	UBRR0H = (unsigned char)(UBRR>>8);
  96:	83 2f       	mov	r24, r19
  98:	99 27       	eor	r25, r25
  9a:	87 fd       	sbrc	r24, 7
  9c:	9a 95       	dec	r25
  9e:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (unsigned char)UBRR;
  a2:	20 93 c4 00 	sts	0x00C4, r18
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  ac:	8e e0       	ldi	r24, 0x0E	; 14
  ae:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = 0b00011000;
	
	Définir le format d’une trame : 8 bits, parité : aucune, 1 bit de stop
	UCSR0C = 0b00000110;
*/	
}
  b2:	08 95       	ret

000000b4 <blinkMyLed>:

void blinkMyLed() {
		PORTD |= 0b00010000; //allumer only D4
  b4:	5c 9a       	sbi	0x0b, 4	; 11
  b6:	84 ec       	ldi	r24, 0xC4	; 196
  b8:	99 e0       	ldi	r25, 0x09	; 9
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ba:	20 e9       	ldi	r18, 0x90	; 144
  bc:	31 e0       	ldi	r19, 0x01	; 1
  be:	f9 01       	movw	r30, r18
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <blinkMyLed+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c6:	d9 f7       	brne	.-10     	; 0xbe <blinkMyLed+0xa>
		_delay_ms (250);
		
		
		
		PORTD &= 0b11101111; //eteindre D
  c8:	5c 98       	cbi	0x0b, 4	; 11
  ca:	84 ec       	ldi	r24, 0xC4	; 196
  cc:	99 e0       	ldi	r25, 0x09	; 9
  ce:	20 e9       	ldi	r18, 0x90	; 144
  d0:	31 e0       	ldi	r19, 0x01	; 1
  d2:	f9 01       	movw	r30, r18
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <blinkMyLed+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  da:	d9 f7       	brne	.-10     	; 0xd2 <blinkMyLed+0x1e>
		_delay_ms (250);
}
  dc:	08 95       	ret

000000de <setup>:


void setup (void)
{	
	DDRD = 0b01110000; // broche D4
  de:	80 e7       	ldi	r24, 0x70	; 112
  e0:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000; //Port D for D4 
  e2:	1b b8       	out	0x0b, r1	; 11
	init_USART(9600);
  e4:	80 e8       	ldi	r24, 0x80	; 128
  e6:	95 e2       	ldi	r25, 0x25	; 37
  e8:	0e 94 40 00 	call	0x80	; 0x80 <init_USART>
}
  ec:	08 95       	ret

000000ee <main>:

int main (void)
{
	setup();
  ee:	0e 94 6f 00 	call	0xde	; 0xde <setup>
	while(1){	
		blinkMyLed();
  f2:	0e 94 5a 00 	call	0xb4	; 0xb4 <blinkMyLed>
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <main+0x4>

000000f8 <__divmodsi4>:
  f8:	97 fb       	bst	r25, 7
  fa:	09 2e       	mov	r0, r25
  fc:	05 26       	eor	r0, r21
  fe:	0e d0       	rcall	.+28     	; 0x11c <__divmodsi4_neg1>
 100:	57 fd       	sbrc	r21, 7
 102:	04 d0       	rcall	.+8      	; 0x10c <__divmodsi4_neg2>
 104:	14 d0       	rcall	.+40     	; 0x12e <__udivmodsi4>
 106:	0a d0       	rcall	.+20     	; 0x11c <__divmodsi4_neg1>
 108:	00 1c       	adc	r0, r0
 10a:	38 f4       	brcc	.+14     	; 0x11a <__divmodsi4_exit>

0000010c <__divmodsi4_neg2>:
 10c:	50 95       	com	r21
 10e:	40 95       	com	r20
 110:	30 95       	com	r19
 112:	21 95       	neg	r18
 114:	3f 4f       	sbci	r19, 0xFF	; 255
 116:	4f 4f       	sbci	r20, 0xFF	; 255
 118:	5f 4f       	sbci	r21, 0xFF	; 255

0000011a <__divmodsi4_exit>:
 11a:	08 95       	ret

0000011c <__divmodsi4_neg1>:
 11c:	f6 f7       	brtc	.-4      	; 0x11a <__divmodsi4_exit>
 11e:	90 95       	com	r25
 120:	80 95       	com	r24
 122:	70 95       	com	r23
 124:	61 95       	neg	r22
 126:	7f 4f       	sbci	r23, 0xFF	; 255
 128:	8f 4f       	sbci	r24, 0xFF	; 255
 12a:	9f 4f       	sbci	r25, 0xFF	; 255
 12c:	08 95       	ret

0000012e <__udivmodsi4>:
 12e:	a1 e2       	ldi	r26, 0x21	; 33
 130:	1a 2e       	mov	r1, r26
 132:	aa 1b       	sub	r26, r26
 134:	bb 1b       	sub	r27, r27
 136:	fd 01       	movw	r30, r26
 138:	0d c0       	rjmp	.+26     	; 0x154 <__udivmodsi4_ep>

0000013a <__udivmodsi4_loop>:
 13a:	aa 1f       	adc	r26, r26
 13c:	bb 1f       	adc	r27, r27
 13e:	ee 1f       	adc	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	a2 17       	cp	r26, r18
 144:	b3 07       	cpc	r27, r19
 146:	e4 07       	cpc	r30, r20
 148:	f5 07       	cpc	r31, r21
 14a:	20 f0       	brcs	.+8      	; 0x154 <__udivmodsi4_ep>
 14c:	a2 1b       	sub	r26, r18
 14e:	b3 0b       	sbc	r27, r19
 150:	e4 0b       	sbc	r30, r20
 152:	f5 0b       	sbc	r31, r21

00000154 <__udivmodsi4_ep>:
 154:	66 1f       	adc	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	88 1f       	adc	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	1a 94       	dec	r1
 15e:	69 f7       	brne	.-38     	; 0x13a <__udivmodsi4_loop>
 160:	60 95       	com	r22
 162:	70 95       	com	r23
 164:	80 95       	com	r24
 166:	90 95       	com	r25
 168:	9b 01       	movw	r18, r22
 16a:	ac 01       	movw	r20, r24
 16c:	bd 01       	movw	r22, r26
 16e:	cf 01       	movw	r24, r30
 170:	08 95       	ret

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
