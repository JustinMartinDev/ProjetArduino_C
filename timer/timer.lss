
timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000001a4  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000003f  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000b7  00000000  00000000  00000203  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000067  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000f1  00000000  00000000  00000321  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b4  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 93 00 	call	0x126	; 0x126 <main>
  88:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
void setup (void);
int first = 0;
void setup (void)
{

	DDRD = 0b00010000; //initialisation des inputs et outputs sur D2
  90:	80 e1       	ldi	r24, 0x10	; 16
  92:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000; //Initialisation du port D
  94:	1b b8       	out	0x0b, r1	; 11
	
	SREG  = 0b10000000; //Permet les interruptions
  96:	80 e8       	ldi	r24, 0x80	; 128
  98:	8f bf       	out	0x3f, r24	; 63
	TCCR1A = 0b00000000;//Initialisation du mode de fonctionnement du timer
  9a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0b00000101;//Initialisation de la fréquence du registre
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = 0b00000001;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 93 6f 00 	sts	0x006F, r24
	TCNT1 =  49910; //65535 -(1/64*10^6) : 1000ms	
  aa:	86 ef       	ldi	r24, 0xF6	; 246
  ac:	92 ec       	ldi	r25, 0xC2	; 194
  ae:	90 93 85 00 	sts	0x0085, r25
  b2:	80 93 84 00 	sts	0x0084, r24
}
  b6:	08 95       	ret

000000b8 <__vector_13>:



ISR(TIMER1_OVF_vect){
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	3f 93       	push	r19
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
	SREG &= 0b00000000;//Bloque les interruptions
  ca:	8f b7       	in	r24, 0x3f	; 63
  cc:	1f be       	out	0x3f, r1	; 63
	
	PORTD ^= 0b00000100; // Allume/Eteint la led
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	94 e0       	ldi	r25, 0x04	; 4
  d2:	89 27       	eor	r24, r25
  d4:	8b b9       	out	0x0b, r24	; 11
	
	TIFR1 &= 0b00000000;
  d6:	86 b3       	in	r24, 0x16	; 22
  d8:	16 ba       	out	0x16, r1	; 22
	
	if(first%2 == 0) TCNT1 = 49910;
  da:	20 91 00 01 	lds	r18, 0x0100
  de:	30 91 01 01 	lds	r19, 0x0101
  e2:	20 fd       	sbrc	r18, 0
  e4:	03 c0       	rjmp	.+6      	; 0xec <__vector_13+0x34>
  e6:	86 ef       	ldi	r24, 0xF6	; 246
  e8:	92 ec       	ldi	r25, 0xC2	; 194
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__vector_13+0x38>
	else TCNT1 = 60000;
  ec:	80 e6       	ldi	r24, 0x60	; 96
  ee:	9a ee       	ldi	r25, 0xEA	; 234
  f0:	90 93 85 00 	sts	0x0085, r25
  f4:	80 93 84 00 	sts	0x0084, r24
	first++;
  f8:	2f 5f       	subi	r18, 0xFF	; 255
  fa:	3f 4f       	sbci	r19, 0xFF	; 255
  fc:	30 93 01 01 	sts	0x0101, r19
 100:	20 93 00 01 	sts	0x0100, r18
	
	TIMSK1 |= 0b00000001;
 104:	80 91 6f 00 	lds	r24, 0x006F
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	80 93 6f 00 	sts	0x006F, r24
	SREG |= 0b10000000;//Autorise les interruptions
 10e:	8f b7       	in	r24, 0x3f	; 63
 110:	80 68       	ori	r24, 0x80	; 128
 112:	8f bf       	out	0x3f, r24	; 63
}
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	3f 91       	pop	r19
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <main>:

int main (void) 
{
	
	setup();
 126:	0e 94 48 00 	call	0x90	; 0x90 <setup>
 12a:	ff cf       	rjmp	.-2      	; 0x12a <main+0x4>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
