
main.elf:     format de fichier elf32-avr

SectionsÂ :
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000140  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006da  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000633  00000000  00000000  0000090a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000010e  00000000  00000000  00000f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  0000104c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033d  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ac  00000000  00000000  00001419  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014c5  2**0
                  CONTENTS, READONLY, DEBUGGING

DÃ©assemblage de la section .textÂ :

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  78:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:

void setup (void);
void setup (void)
{

	DDRD = 0b00110100; //initialisation des inputs et outputs sur D
  80:	84 e3       	ldi	r24, 0x34	; 52
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00100000; //Initialisation du port D (D5 sous tension)
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	8b b9       	out	0x0b, r24	; 11
	
	SREG  = 0b10000000; //Permet les interruptions
  88:	80 e8       	ldi	r24, 0x80	; 128
  8a:	8f bf       	out	0x3f, r24	; 63
	
	TCCR1A = 0b00000000;//Initialisation du mode de fonctionnement du timer
  8c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0b00000101;//Initialisation de la fréquence du registre
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = 0b00000001;
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCNT1 =  49910; //65535 -(1/64*10^6) : 1000ms	
  9c:	86 ef       	ldi	r24, 0xF6	; 246
  9e:	92 ec       	ldi	r25, 0xC2	; 194
  a0:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  a4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	
	
	EICRA = 0b00000100; //Déclenchement sur changement de niveau logique
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0b00000010;
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	8d bb       	out	0x1d, r24	; 29
  b2:	08 95       	ret

000000b4 <__vector_13>:
	
	
}


ISR(TIMER1_OVF_vect){
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
	SREG &= 0b00000000;//Bloque les interruptions
  c6:	8f b7       	in	r24, 0x3f	; 63
  c8:	1f be       	out	0x3f, r1	; 63
	
	PORTD ^= 0b00010000; // Allume/Eteint la led D4
  ca:	9b b1       	in	r25, 0x0b	; 11
  cc:	80 e1       	ldi	r24, 0x10	; 16
  ce:	89 27       	eor	r24, r25
  d0:	8b b9       	out	0x0b, r24	; 11
	
	TIFR1 &= 0b00000000;
  d2:	86 b3       	in	r24, 0x16	; 22
  d4:	16 ba       	out	0x16, r1	; 22
	/*
	if(first%2 == 0) TCNT1 = 49910;
	else TCNT1 = 60000;
	first++;
	*/
	TCNT1 = 49910;
  d6:	86 ef       	ldi	r24, 0xF6	; 246
  d8:	92 ec       	ldi	r25, 0xC2	; 194
  da:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  de:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	TIMSK1 |= 0b00000001;
  e2:	ef e6       	ldi	r30, 0x6F	; 111
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	80 83       	st	Z, r24
	SREG |= 0b10000000;//Autorise les interruptions
  ec:	8f b7       	in	r24, 0x3f	; 63
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	8f bf       	out	0x3f, r24	; 63
}
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <__vector_2>:



ISR(INT1_vect){
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
	SREG &= 0b00000000;//Bloque les interruptions
 112:	8f b7       	in	r24, 0x3f	; 63
 114:	1f be       	out	0x3f, r1	; 63
	
	PORTD ^= 0b00100100; // Allume/Eteint la led (changement d'etat)
 116:	9b b1       	in	r25, 0x0b	; 11
 118:	84 e2       	ldi	r24, 0x24	; 36
 11a:	89 27       	eor	r24, r25
 11c:	8b b9       	out	0x0b, r24	; 11
	

	
	
	EIFR &= 0b00000000;//INTF1 à 0
 11e:	8c b3       	in	r24, 0x1c	; 28
 120:	1c ba       	out	0x1c, r1	; 28

	
	SREG |= 0b10000000;//Autorise les interruptions
 122:	8f b7       	in	r24, 0x3f	; 63
 124:	80 68       	ori	r24, 0x80	; 128
 126:	8f bf       	out	0x3f, r24	; 63
}
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <main>:

int main (void) 
{
	
	setup();
 136:	0e 94 40 00 	call	0x80	; 0x80 <setup>
 13a:	ff cf       	rjmp	.-2      	; 0x13a <main+0x4>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
