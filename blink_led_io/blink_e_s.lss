
blink_e_s.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000034  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002d9  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000011b  00000000  00000000  00000493  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000226  00000000  00000000  000005ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c7  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000f0  00000000  00000000  000008db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 81 00 	call	0x102	; 0x102 <main>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
void blinkMyLed();

void setup (void)
{
	
	DDRD = 0b01110000; // broche D4
  80:	80 e7       	ldi	r24, 0x70	; 112
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000; //Port D for D4 
  84:	1b b8       	out	0x0b, r1	; 11
}
  86:	08 95       	ret

00000088 <blinkMyLed>:
	
	return 0;
}

void blinkMyLed() {
		PORTD |= 0b00010000; //allumer only D4
  88:	5c 9a       	sbi	0x0b, 4	; 11
  8a:	84 ec       	ldi	r24, 0xC4	; 196
  8c:	99 e0       	ldi	r25, 0x09	; 9
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8e:	20 e9       	ldi	r18, 0x90	; 144
  90:	31 e0       	ldi	r19, 0x01	; 1
  92:	f9 01       	movw	r30, r18
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <blinkMyLed+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  9a:	d9 f7       	brne	.-10     	; 0x92 <blinkMyLed+0xa>
		_delay_ms (250);
		PORTD |= 0b00100000; //allumer only D4
  9c:	5d 9a       	sbi	0x0b, 5	; 11
  9e:	84 ec       	ldi	r24, 0xC4	; 196
  a0:	99 e0       	ldi	r25, 0x09	; 9
  a2:	20 e9       	ldi	r18, 0x90	; 144
  a4:	31 e0       	ldi	r19, 0x01	; 1
  a6:	f9 01       	movw	r30, r18
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <blinkMyLed+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ae:	d9 f7       	brne	.-10     	; 0xa6 <blinkMyLed+0x1e>
		_delay_ms (250);
		PORTD |= 0b01000000; //allumer only D4
  b0:	5e 9a       	sbi	0x0b, 6	; 11
  b2:	84 ec       	ldi	r24, 0xC4	; 196
  b4:	99 e0       	ldi	r25, 0x09	; 9
  b6:	20 e9       	ldi	r18, 0x90	; 144
  b8:	31 e0       	ldi	r19, 0x01	; 1
  ba:	f9 01       	movw	r30, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <blinkMyLed+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <blinkMyLed+0x32>
		_delay_ms (250);
		
		
		PORTD &= 0b11101111; //eteindre D
  c4:	5c 98       	cbi	0x0b, 4	; 11
  c6:	84 ec       	ldi	r24, 0xC4	; 196
  c8:	99 e0       	ldi	r25, 0x09	; 9
  ca:	20 e9       	ldi	r18, 0x90	; 144
  cc:	31 e0       	ldi	r19, 0x01	; 1
  ce:	f9 01       	movw	r30, r18
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <blinkMyLed+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d6:	d9 f7       	brne	.-10     	; 0xce <blinkMyLed+0x46>
		_delay_ms (250);
		PORTD &= 0b11011111; //eteindre D
  d8:	5d 98       	cbi	0x0b, 5	; 11
  da:	84 ec       	ldi	r24, 0xC4	; 196
  dc:	99 e0       	ldi	r25, 0x09	; 9
  de:	20 e9       	ldi	r18, 0x90	; 144
  e0:	31 e0       	ldi	r19, 0x01	; 1
  e2:	f9 01       	movw	r30, r18
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <blinkMyLed+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ea:	d9 f7       	brne	.-10     	; 0xe2 <blinkMyLed+0x5a>
		_delay_ms (250);
		PORTD &= 0b10111111; //eteindre D
  ec:	5e 98       	cbi	0x0b, 6	; 11
  ee:	84 ec       	ldi	r24, 0xC4	; 196
  f0:	99 e0       	ldi	r25, 0x09	; 9
  f2:	20 e9       	ldi	r18, 0x90	; 144
  f4:	31 e0       	ldi	r19, 0x01	; 1
  f6:	f9 01       	movw	r30, r18
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <blinkMyLed+0x70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fe:	d9 f7       	brne	.-10     	; 0xf6 <blinkMyLed+0x6e>
		_delay_ms (250);
 100:	08 95       	ret

00000102 <main>:
void blinkMyLed();

void setup (void)
{
	
	DDRD = 0b01110000; // broche D4
 102:	80 e7       	ldi	r24, 0x70	; 112
 104:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000; //Port D for D4 
 106:	1b b8       	out	0x0b, r1	; 11
int main (void)
{
	setup();
	while(1)
	{	
		blinkMyLed();
 108:	0e 94 44 00 	call	0x88	; 0x88 <blinkMyLed>
 10c:	fd cf       	rjmp	.-6      	; 0x108 <main+0x6>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
