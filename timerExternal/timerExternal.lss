
timerExternal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000034  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000bb  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000083  00000000  00000000  00000245  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000eb  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000bd  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:

void setup (void);
void setup (void)
{

	DDRD = 0b00010000; //initialisation des inputs et outputs sur D2
  80:	80 e1       	ldi	r24, 0x10	; 16
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000; //Initialisation du port D
  84:	1b b8       	out	0x0b, r1	; 11
	
	SREG  = 0b10000000; //Permet les interruptions
  86:	80 e8       	ldi	r24, 0x80	; 128
  88:	8f bf       	out	0x3f, r24	; 63
	//TCCR1A = 0b00000000;//Initialisation du mode de fonctionnement du timer
	//TCCR1B = 0b00000101;//Initialisation de la fréquence du registre
	//TIMSK1 = 0b00000001;
	//TCNT1 =  49910; //65535-(1/64*10^6) : 1000ms	
	
	EICRA = 0b00001100;
  8a:	8c e0       	ldi	r24, 0x0C	; 12
  8c:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0b00000010;
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	8d bb       	out	0x1d, r24	; 29
	
	
}
  94:	08 95       	ret

00000096 <__vector_2>:



ISR(INT1_vect){
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	SREG &= 0b00000000;//Bloque les interruptions
  a4:	8f b7       	in	r24, 0x3f	; 63
  a6:	1f be       	out	0x3f, r1	; 63
	
	PORTD ^= 0b00000100; // Allume/Eteint la led
  a8:	8b b1       	in	r24, 0x0b	; 11
  aa:	94 e0       	ldi	r25, 0x04	; 4
  ac:	89 27       	eor	r24, r25
  ae:	8b b9       	out	0x0b, r24	; 11

	EIFR &= 0b00000000;//INTF1 à 0
  b0:	8c b3       	in	r24, 0x1c	; 28
  b2:	1c ba       	out	0x1c, r1	; 28

	
	SREG |= 0b10000000;//Autorise les interruptions
  b4:	8f b7       	in	r24, 0x3f	; 63
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	8f bf       	out	0x3f, r24	; 63
}
  ba:	9f 91       	pop	r25
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <main>:

void setup (void);
void setup (void)
{

	DDRD = 0b00010000; //initialisation des inputs et outputs sur D2
  c8:	80 e1       	ldi	r24, 0x10	; 16
  ca:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000; //Initialisation du port D
  cc:	1b b8       	out	0x0b, r1	; 11
	
	SREG  = 0b10000000; //Permet les interruptions
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	8f bf       	out	0x3f, r24	; 63
	//TCCR1A = 0b00000000;//Initialisation du mode de fonctionnement du timer
	//TCCR1B = 0b00000101;//Initialisation de la fréquence du registre
	//TIMSK1 = 0b00000001;
	//TCNT1 =  49910; //65535-(1/64*10^6) : 1000ms	
	
	EICRA = 0b00001100;
  d2:	8c e0       	ldi	r24, 0x0C	; 12
  d4:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0b00000010;
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	8d bb       	out	0x1d, r24	; 29
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x14>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
