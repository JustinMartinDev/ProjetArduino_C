
timerExternal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000034  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000019b  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000011b  00000000  00000000  0000034d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001d7  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000100  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000080  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 65 00 	call	0xca	; 0xca <main>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:

void setup (void);
void setup (void)
{

	DDRD = 0b00110100; //initialisation des inputs et outputs sur D
  80:	84 e3       	ldi	r24, 0x34	; 52
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00100000; //Initialisation du port D (D5 sous tension)
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	8b b9       	out	0x0b, r24	; 11
	
	SREG  = 0b10000000; //Permet les interruptions
  88:	80 e8       	ldi	r24, 0x80	; 128
  8a:	8f bf       	out	0x3f, r24	; 63

	
	EICRA = 0b00000100; //Déclenchement sur changement de niveau logique
  8c:	84 e0       	ldi	r24, 0x04	; 4
  8e:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0b00000010;
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	8d bb       	out	0x1d, r24	; 29
	
	
}
  96:	08 95       	ret

00000098 <__vector_2>:



ISR(INT1_vect){
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
	SREG &= 0b00000000;//Bloque les interruptions
  a6:	8f b7       	in	r24, 0x3f	; 63
  a8:	1f be       	out	0x3f, r1	; 63
	
	PORTD ^= 0b00100100; // Allume/Eteint la led (changement d'etat)
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	94 e2       	ldi	r25, 0x24	; 36
  ae:	89 27       	eor	r24, r25
  b0:	8b b9       	out	0x0b, r24	; 11
	

	
	
	EIFR &= 0b00000000;//INTF1 à 0
  b2:	8c b3       	in	r24, 0x1c	; 28
  b4:	1c ba       	out	0x1c, r1	; 28

	
	SREG |= 0b10000000;//Autorise les interruptions
  b6:	8f b7       	in	r24, 0x3f	; 63
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	8f bf       	out	0x3f, r24	; 63
}
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <main>:

void setup (void);
void setup (void)
{

	DDRD = 0b00110100; //initialisation des inputs et outputs sur D
  ca:	84 e3       	ldi	r24, 0x34	; 52
  cc:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00100000; //Initialisation du port D (D5 sous tension)
  ce:	80 e2       	ldi	r24, 0x20	; 32
  d0:	8b b9       	out	0x0b, r24	; 11
	
	SREG  = 0b10000000; //Permet les interruptions
  d2:	80 e8       	ldi	r24, 0x80	; 128
  d4:	8f bf       	out	0x3f, r24	; 63

	
	EICRA = 0b00000100; //Déclenchement sur changement de niveau logique
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0b00000010;
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	8d bb       	out	0x1d, r24	; 29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e0:	20 e9       	ldi	r18, 0x90	; 144
  e2:	31 e0       	ldi	r19, 0x01	; 1
	

    while(1) // Exécution en continu du programme
    {
		
		PORTD |= 0b00010000; //allumer only D4
  e4:	5c 9a       	sbi	0x0b, 4	; 11
  e6:	80 e1       	ldi	r24, 0x10	; 16
  e8:	97 e2       	ldi	r25, 0x27	; 39
  ea:	f9 01       	movw	r30, r18
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f2:	d9 f7       	brne	.-10     	; 0xea <main+0x20>
		_delay_ms (1000);
		PORTD &= 0b11101111; //eteindre D4
  f4:	5c 98       	cbi	0x0b, 4	; 11
  f6:	80 e1       	ldi	r24, 0x10	; 16
  f8:	97 e2       	ldi	r25, 0x27	; 39
  fa:	f9 01       	movw	r30, r18
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 100:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 102:	d9 f7       	brne	.-10     	; 0xfa <main+0x30>
 104:	ef cf       	rjmp	.-34     	; 0xe4 <main+0x1a>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
